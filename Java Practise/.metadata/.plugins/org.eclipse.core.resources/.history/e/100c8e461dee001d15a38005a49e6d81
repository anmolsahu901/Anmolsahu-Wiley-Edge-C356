package Data_Structures;

class Node{
	int item;
	Node left ,right;

	public Node(int key){
		item = key;
		left = right =null;
	}
}

public class B1BinaryTree {

	Node root;
	public B1BinaryTree() {
		root = null;
	}
	
	//postOrder 
	void postOrder(Node node) {
		if(node == null)
			return;
		postOrder(node.left);
		postOrder(node.right);
		System.out.print(node.item+"->");
	}
	
	//inorder
	void inorder(Node node) {
		if(node == null)
			return;
		
		inorder(node.left);
		System.out.print(node.item+"->");
		inorder(node.right);
	}
	
	//preorder
	void preOrder(Node node) {
		if(node == null)
			return;
		
		System.out.print(node.item+"->");
		
		preOrder(node.left);
		preOrder(node.right);
	}
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		B1BinaryTree tree = new B1BinaryTree();
		tree.root = new Node(1);
		tree.root.left = new Node(12);
		tree.root.right = new Node(9);
		tree.root.left.right = new Node(5);
		tree.root.left.right = new Node(6);

		System.out.println("Inorder Traversal :");
		tree.inorder(tree.root);
		
		System.out.println("Preorder Traversal :");
		tree.preOrder(tree.root);
		
		System.out.println("Postorder Traversal :");
		tree.postOrder(tree.root);
		
	}

}







